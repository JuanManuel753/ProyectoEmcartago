@page "/ingresoysalidacomputo/editar/{Id:int}"
@inject IRepositorioIngresoySalida repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensaje

<PageTitle>Editar Ingreso y Salida de Computo</PageTitle>

<MudText Typo="Typo.h5" Style="display:flex; justify-content:center;">Registro de Ingreso/Salida </MudText>
<MudText Typo="Typo.h6" Style="display:flex; justify-content:center;">N° de registro : @IngresoySalidaEquiposComputo.Id </MudText>
@if (IngresoySalidaEquiposComputo == null)
{
    <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
}
else
{
    <FormularioIngresoySalida OnValidSubmit="Editar" IngresoySalidaEquiposComputo="IngresoySalidaEquiposComputo" />
}

@code {
    [Parameter] public int Id { get; set; }
    IngresoySalida IngresoySalidaEquiposComputo = new IngresoySalida();

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<IngresoySalida>($"api/IngresoySalidaComputo/{Id}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/indiceingresoysalidacomputo");
            }
            else
            {
                await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());
            }
        }
        else
        {

            IngresoySalidaEquiposComputo = httpResponse.Response;

        }
    }


    private async Task Editar()
    {
        var httpResponse = await repositorio.Put("api/IngresoySalidaComputo", IngresoySalidaEquiposComputo);
        if (httpResponse.Error)
        {
            await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            await mostrarMensaje.MostrarMensajeExitoso("Edicion De Entrada y Salida Computo Exitoso");
            navigationManager.NavigateTo("/indiceingresoysalidacomputo");
        }
    }
}
