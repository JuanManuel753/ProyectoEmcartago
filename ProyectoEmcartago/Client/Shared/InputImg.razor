
<div>
    <label style="
    box-shadow: 0 2px 7px #4caf50;
    display: inline-flex;
    width: 150px;
    justify-content: space-around;
    border-radius: 2em;
    color: white;
    border:2px solid;
    cursor: pointer;
    align-items: center;
    padding:16px;
    background-color: #4caf50;"
            for="fileInput2">
        Cargar Firma <MudIcon Icon="@Icons.Filled.CloudUpload" />
    </label>

    <InputFile OnChange="OnChange" id="fileInput2" hidden accept=".jpg,.jpeg,.png" />
</div>


<div>
    @if (imagenBase64 != null)
    {
        <MudCard Class="ma-2" Elevation="0">
            <MudCardContent Style="margin:10px">
                <img src="data:image/jpeg;base64, @imagenBase64" style="width: 400px" />
            </MudCardContent>
        </MudCard>
    }
    @if (ImagenURL != null)
    {
        <div>
            <div style="margin:10px">
                <img src="@ImagenURL" style="width: 400px" />
            </div>
        </div>
    }
</div>



@code {
    [Parameter] public string Label { get; set; } = "Imagen";
    [Parameter] public string ImagenURL { get; set; }
    [Parameter] public EventCallback<string> ImagenSeleccionada { get; set; }
    private string imagenBase64;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var imagenes = e.GetMultipleFiles();

        foreach (var imagen in imagenes)
        {
            var arrbytes = new byte[imagen.Size];
            await imagen.OpenReadStream().ReadAsync(arrbytes);
            imagenBase64 = Convert.ToBase64String(arrbytes);
            ImagenURL = null;
            await ImagenSeleccionada.InvokeAsync(imagenBase64);
            StateHasChanged();
        }

    }
}